name: Copy wmio flow service from reference source project to multiple projects

on:
  workflow_dispatch:
    inputs:
      flowService:
        description: 'Name of the flow service'
        required: true
      sourceProjectId:
        description: 'Identifier of the source project (uid)'
        required: true
      commitMessage:
        description: 'Message to include with commit of flow service definition'
        required: true

jobs:
  export:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Export the flow service definition
      run: |
        # Get the source project's flow service download link
        DOWNLOAD_LINK=$(curl -s -u "${{ secrets.WMIO_USERNAME }}:${{ secrets.WMIO_PASSWORD }}" \
          --request POST "${{ secrets.WMIO_URL }}/apis/v1/rest/projects/${{ github.event.inputs.sourceProjectId }}/flows/${{ github.event.inputs.flowService }}/export" | jq -r '.output.download_link')

        if [ -z "$DOWNLOAD_LINK" ]; then
          echo "Failure to retrieve flow service download link"
          exit 1
        fi

        # Download the flow service zip archive
        mkdir -p flow-services
        curl -s "$DOWNLOAD_LINK" -o flow-services/${{ github.event.inputs.flowService }}.zip

        MD5=$(md5 flow-services/${{ github.event.inputs.flowService }}.zip)
        echo "ZIP md5 hash: " $MD5

        if unzip -t "flow-services/${{ github.event.inputs.flowService }}.zip" >/dev/null 2>&1; then
          echo "Exported flow service zip is valid."
        else
          echo "Exported flow service zip is corrupted."
          exit 1
        fi

        # Push the new flow service version to the git remote
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add flow-services/${{ github.event.inputs.flowService }}.zip
        git commit -m "${{ github.event.inputs.commitMessage }}"
        git push

  import:
    runs-on: ubuntu-latest
    needs: export

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Update the flow service definition in all projects where it is used
      run: |
        # Get the list of projects
        PROJECTS=$(curl -s -u "${{ secrets.WMIO_USERNAME }}:${{ secrets.WMIO_PASSWORD }}" "${{ secrets.WMIO_URL }}/apis/v1/rest/projects" | jq -r .output.projects | jq -c '.[]')

        if [ -z "$PROJECTS" ]; then
            echo "Failure to retrieve list of projects"
            exit 1
        fi 

        MD5=$(md5 $(pwd)/flow-services/${{ github.event.inputs.flowService }}.zip)
        echo "ZIP md5 hash: " $MD5

        # Iterate over the list of projects to import the new flow service version
        for project in $PROJECTS; do

            PROJECT_NAME=$(echo "$project" | jq -r '.name')
            PROJECT_UID=$(echo "$project" | jq -r '.uid')

            FLOW_SERVICES=$(curl -s -u "${{ secrets.WMIO_USERNAME }}:${{ secrets.WMIO_PASSWORD }}" "${{ secrets.WMIO_URL }}/apis/v1/rest/projects/$PROJECT_UID/assets" | jq -r '.output.flows[]')

            # Check if the flow service is in the list of flows using Bash
            if echo "$FLOW_SERVICES" | grep -q -w "${{ github.event.inputs.flowService }}"; then
                # We don't update the flow service in the source project
                if [ "$PROJECT_UID" != "${{ github.event.inputs.sourceProjectId }}" ]; then
                    curl -s -u "${{ secrets.WMIO_USERNAME }}:${{ secrets.WMIO_PASSWORD }}" \
                      --request POST "${{ secrets.WMIO_URL }}/apis/v1/rest/projects/$project/flow-import" \
                      --form "recipe=@$(pwd)/flow-services/${{ github.event.inputs.flowService }}.zip" >/dev/null \
                        && echo "Project $PROJECT_NAME updated" || echo "Project $PROJECT_NAME NOT UPDATED"
                fi
            fi
        done